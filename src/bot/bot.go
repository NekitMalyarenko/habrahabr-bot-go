package bot

import (
	"errors"
	"encoding/json"
	"io/ioutil" 					// —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/anaskhan96/soup"	// html parser
	"github.com/mmcdole/gofeed" 	// Rss parser
	"gopkg.in/telegram-bot-api.v4" 	// Telegram api

	"logging"						// –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	"config"
	"db"							// –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
)


// Bot –Ω–∞–¥—Å—Ç—Ä—Ä–æ–π–∫–∞ –Ω–∞–¥ tgbotapi.BotAPI
type Bot struct {
	botAPI 	*tgbotapi.BotAPI

	// –ö–∞–Ω–∞–ª—ã
	startChan	 	   chan *tgbotapi.Message
	startMailoutChan   chan userCommand
	helpChan		   chan *tgbotapi.Message
	stopMailoutChan    chan userCommand
	getStatusChan	   chan userCommand
	addTagsChan		   chan userCommand
	delTagsChan		   chan userCommand
	delAllTagsChan	   chan userCommand
	copyTagsChan	   chan userCommand
	sendIVChan		   chan userCommand
	getBestChan		   chan userCommand
	keyboardChan       chan userCommand
}


// NewBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞
func NewBot() *Bot {
	var err error

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	var bot Bot
	bot.botAPI, err = tgbotapi.NewBotAPI(config.Data.BotToken)
	if err != nil {
		logging.LogFatalError("NewBot", "–≤—ã–∑–æ–≤ NewBotAPI()", err)
	}

	bot.botAPI.Buffer = 12 * 50

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
	bot.startChan = 		make(chan *tgbotapi.Message, 50)
	bot.startMailoutChan =	make(chan userCommand, 50)
	bot.helpChan =			make(chan *tgbotapi.Message, 50)
	bot.stopMailoutChan =	make(chan userCommand, 50)
	bot.getStatusChan = 	make(chan userCommand, 50)
	bot.addTagsChan = 		make(chan userCommand, 50)
	bot.delTagsChan = 		make(chan userCommand, 50)
	bot.delAllTagsChan = 	make(chan userCommand, 50)
	bot.copyTagsChan = 		make(chan userCommand, 50)
	bot.sendIVChan = 		make(chan userCommand, 50)
	bot.getBestChan = 		make(chan userCommand, 50)
	bot.keyboardChan =      make(chan userCommand, 50)

	return &bot
}


// StartPooling –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
func (bot *Bot) StartPooling() {
	// Goroutines
	go bot.start(bot.startChan)
	go bot.startMailout(bot.startMailoutChan)
	go bot.help(bot.helpChan)
	go bot.stopMailoutForUser(bot.stopMailoutChan)
	go bot.mailout()
	go bot.getStatus(bot.getStatusChan)
	go bot.addTags(bot.addTagsChan)
	go bot.delTags(bot.delTagsChan)
	go bot.delAllTags(bot.delAllTagsChan)
	go bot.getBest(bot.getBestChan)
	go bot.copyTags(bot.copyTagsChan)
	go bot.sendIV(bot.sendIVChan)
	go bot.handleKeyboard(bot.keyboardChan)

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	updateChannel, err := bot.botAPI.GetUpdatesChan(updateConfig)
	if err != nil {
		logging.LogFatalError("NewBot", "–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å GetUpdatesChan", err)
	}

	for update := range updateChannel {
		if update.Message == nil {
			continue
		} else if !bot.distributeMessages(update.Message) {
			message := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help")
			message.ReplyToMessageID = update.Message.MessageID
			bot.send(message)
		}
	}
}


// distributeMessages —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ goroutine'–∞–º
// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false, –∏–Ω–∞—á–µ ‚Äì true
func (bot *Bot) distributeMessages(message *tgbotapi.Message) bool {
	var isRightCommand = false
	var site string

	command := message.Command()
	if command == "" {
		logging.LogRequest(logging.RequestData{Command: "InstantView", Username: message.Chat.UserName, ID: message.Chat.ID})
	
		if res, _ := regexp.MatchString(habrArticleRegexPattern, message.Text); res {
			bot.sendIVChan <- userCommand{message, habr}
			isRightCommand = true
		} else if res, _ = regexp.MatchString(geekArticleRegexPattern, message.Text); res {
			bot.sendIVChan <- userCommand{message, geek}
			isRightCommand = true
		}
	} else {
		// –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
		logging.LogRequest(logging.RequestData{Command: "/" + command, Username: message.Chat.UserName, ID: message.Chat.ID})

		// –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç.–∫. –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
		if command == "help" {
			bot.helpChan <- message
			return true
		} else if command == "start" {
			bot.startChan <- message
			return true
		}

		// –î–ª–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ > 5
		if len(command) <= 5 {
			return false
		}
		if prefix := command[:5]; prefix == "geek_" {
			site = geek
		} else if prefix == "habr_" {
			site = habr
		} else {
			return false
		}
		command = command[5:]
		
		switch command {
			case "start": {
				bot.startMailoutChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "stop": {
				bot.stopMailoutChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "tags": {
				bot.getStatusChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "add_tags": {
				bot.addTagsChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "del_tags":
			{
				bot.delTagsChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "del_all_tags": {
				bot.delAllTagsChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "best": {
				bot.getBestChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "copy_tags": {
				bot.copyTagsChan <- userCommand{message, site}
				isRightCommand = true
			}
			case "keyboard" : {
				bot.keyboardChan <- userCommand{message, site}
				isRightCommand = true
			}
		}
		
	}

	return isRightCommand
}


// Notify –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç
func (bot *Bot) Notify(sMessage string) {
	users, err := db.GetAllUsers()
	if err != nil {
		logging.LogMinorError("Notify", "–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", err)
		return
	}

	for _, user := range users {
		message := tgbotapi.NewMessage(user.ID, sMessage)
		message.ParseMode = "HTML"
		bot.send(message)
	}
}



// send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (bot *Bot) send(msg tgbotapi.MessageConfig) {
	bot.botAPI.Send(msg)
}


// start –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (bot *Bot) start(data chan *tgbotapi.Message) {
	for msg := range data {
		// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		err := db.CreateUser(strconv.FormatInt(msg.Chat.ID, 10))
		if err != nil {
			data := logging.ErrorData{
				Error: err, 
				Username: msg.Chat.UserName, 
				UserID: msg.Chat.ID,
				Command: "/start",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, "–ü—Ä–∏–≤–µ—Ç, " + msg.Chat.UserName + "! –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
		message.ReplyMarkup = habrKeyboard()
		bot.send(message)
	}
}


// startMailout –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
func (bot *Bot) startMailout(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		var err error
		if site == habr {
			err = db.StartMailout(strconv.FormatInt(msg.Chat.ID, 10), habr)
		} else if site == geek {
			err = db.StartMailout(strconv.FormatInt(msg.Chat.ID, 10), geek)
		}

		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/start_mailout",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è " + site}	
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è " + site + " –≤–∫–ª—é—á–µ–Ω–∞")
		bot.send(message)
	}
}


// help –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func (bot *Bot) help(data chan *tgbotapi.Message) {
	for msg := range data {
		message := tgbotapi.NewMessage(msg.Chat.ID, helpText)
		message.ParseMode = "HTML"
		bot.send(message)
	}
}


// getStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
func (bot *Bot) getStatus(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		user, err := db.GetUser(strconv.FormatInt(msg.Chat.ID, 10))
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		var tags []string
		if site == habr {
			tags = user.HabrTags
		} else if site == geek {
			tags = user.GeekTags
		}

		var text string
		if len(tags) == 0 {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
		} else {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
			text += strings.Join(tags, "\n* ")
		}

		text += "\n\nüì¨ –†–∞—Å—Å—ã–ª–∫–∞: "

		if site == habr {
			if user.HabrMailout {
				text += "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
			} else {
				text += "–Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
			}
		} else if site == geek {
			if user.GeekMailout {
				text += "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
			} else {
				text += "–Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
			}
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, text)
		bot.send(message)
	}
}


// addTags –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func (bot *Bot) addTags(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		newTags := strings.Split(strings.ToLower(msg.CommandArguments()), " ")
		if len(newTags) == 0 {
			logging.SendErrorToUser("—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", bot.botAPI, msg.Chat.ID)
			continue
		}

		var updatedTags []string
		var err error
		if site == habr {
			updatedTags, err = db.AddUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr, newTags)
		} else if site == geek {
			updatedTags, err = db.AddUserTags(strconv.FormatInt(msg.Chat.ID, 10), geek, newTags)
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...add_tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		var text string
		if len(updatedTags) == 0 {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
		} else {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
			text += strings.Join(updatedTags, "\n* ")
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, text)
		bot.send(message)
	}
}


// delTags —É–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
func (bot *Bot) delTags(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		tagsForDel := strings.Split(strings.ToLower(msg.CommandArguments()), " ")
		if len(tagsForDel) == 0 {
			logging.SendErrorToUser("—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", bot.botAPI, msg.Chat.ID)
			continue
		}

		var updatedTags []string
		var err error 
		if site == habr {
			updatedTags, err = db.DelUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr, tagsForDel)
		} else if site == geek {
			updatedTags, err = db.DelUserTags(strconv.FormatInt(msg.Chat.ID, 10), geek, tagsForDel)
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...del_tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		var text string
		if len(updatedTags) == 0 {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
		} else {
			text = "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* "
			text += strings.Join(updatedTags, "\n* ")
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, text)
		bot.send(message)
	}
}


// delAllTags –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (bot *Bot) delAllTags(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		var err error
		if site == habr {
			err = db.DelAllUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr)
		} else if site == geek {
			err = db.DelAllUserTags(strconv.FormatInt(msg.Chat.ID, 10), habr)
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...del_all_tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, "–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –æ—á–∏—â–µ–Ω")
		bot.send(message)
	}
}


// copyTags –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Habrahabr
func (bot *Bot) copyTags(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		userURL := msg.CommandArguments()
		var res bool
		switch site {
			case habr: {
				res, _ = regexp.MatchString(habrUserRegexPattern, userURL)
			}
			case geek: {
				res, _ = regexp.MatchString(geekUserRegexPattern, userURL)
			}
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if !res {
			logging.SendErrorToUser("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏", bot.botAPI, msg.Chat.ID)
			continue
		}

		// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞
		resp, err := soup.Get(userURL)
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...copy_tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		var userTags []string

		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
		doc := soup.HTMLParse(resp)
		tags := doc.FindAll("li", "rel", "hub-popover")
		for _, tagNode := range tags {
			res := tagNode.Find("a")
			tag := res.Text()
			tag = strings.ToLower(tag)
			tag = strings.Replace(tag, " ", "_", -1)
			userTags = append(userTags, tag)
		}
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–ª–æ–≥–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
		tags = doc.FindAll("div", "class", "media-obj__body media-obj__body_list-view list-snippet")
		for _, tagNode := range tags {
			res := tagNode.Find("a")

			tag := "–ë–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ " + res.Text()
			tag = strings.ToLower(tag)
			tag = strings.Replace(tag, " ", "_", -1)
			userTags = append(userTags, tag)
		}

		if len(userTags) == 0 {
			logging.SendErrorToUser("–±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ 0 —Ç–µ–≥–æ–≤. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ", bot.botAPI, msg.Chat.ID)
			continue
		}
		
		switch site {
			case habr: {
				err = db.UpdateTags(strconv.FormatInt(msg.Chat.ID, 10), habr, userTags)
			}
			case geek: {
				err = db.UpdateTags(strconv.FormatInt(msg.Chat.ID, 10), habr, userTags)
			}
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...copy_tags",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–≥–∏" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		text := "–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n* " + strings.Join(userTags, "\n* ")
		message := tgbotapi.NewMessage(msg.Chat.ID, text)
		bot.send(message)
	}
}


// stopMailoutForUser –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (bot *Bot) stopMailoutForUser(data chan userCommand) {
	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site

		var err error
		if site == habr {
			err = db.StopMailout(strconv.FormatInt(msg.Chat.ID, 10), habr)
		} else if site == geek {
			err = db.StopMailout(strconv.FormatInt(msg.Chat.ID, 10), geek)
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...stop",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è " + site }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, "–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
		bot.send(message)
	}
}


// sendIV –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø—Ä–∏—Å–ª–∞–ª, –≤ –≤–∏–¥–µ InstantView
func (bot *Bot) sendIV(data chan userCommand) {
	habrRegexpPattern, _ := regexp.Compile(habrArticleRegexPattern)
	geekRegexpPattern, _ := regexp.Compile(geekArticleRegexPattern)

	var msg *tgbotapi.Message
	var site string

	for command := range data {
		msg = command.message
		site = command.site
		var link, instantViewURL string
		
		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø–∞–ª–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, —Å—Å—ã–ª–∫–∞ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
		switch site {
			case habr: {
				link = habrRegexpPattern.FindString(msg.Text)
				instantViewURL = formatString(habrInstantViewURL, map[string]string{"url": link})
			}
			case geek:{
				link = geekRegexpPattern.FindString(msg.Text)
				instantViewURL = formatString(geekInstantViewURL, map[string]string{"url": link})
			}
		}

		text := "<a href=\"" + instantViewURL + "\">InstantView</a>\n\n" +
			"<a href=\"" + link + "\">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ</a>\n\n" +
			"<a href=\"" + link + "#comments\">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º</a>"

		message := tgbotapi.NewMessage(msg.Chat.ID, text)
		message.ParseMode = "HTML"
		bot.send(message)
	}
}


// getBest –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.
// –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é ‚Äì 5, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ - –¥—Ä—É–≥–æ–µ
func (bot *Bot) getBest(data chan userCommand) {
	parser := gofeed.NewParser()

	var msg *tgbotapi.Message
	var site string

	const link string = "<a href='{link}'>{title}</a>"

	for command := range data {
		msg = command.message
		site = command.site
		var feed *gofeed.Feed
		var err error
		switch site {
		case habr:
			feed, err = parser.ParseURL(bestHabrArticlesURL)
		case geek:
			feed, err = parser.ParseURL(bestGeekArticlesURL)
		}
		if err != nil {
			data := logging.ErrorData{
				Error: err,
				Username: msg.Chat.UserName,
				UserID: msg.Chat.ID,
				Command: "/...best",
				AddInfo: "–ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RSS-–ª–µ–Ω—Ç—É" }
			logging.LogErrorAndNotify(data, bot.botAPI)
			continue
		}
		bestArticles := "<b>–õ—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:</b>\n"
		limit := 5
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–æ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
		if msg.CommandArguments() != "" {
			temp, err := strconv.Atoi(msg.CommandArguments())
			if err == nil && temp > 0 {
				limit = temp
			}
		}
		// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
		for i, item := range feed.Items {
			if i >= limit {
				break
			}
			number := strconv.Itoa(i + 1)
			bestArticles += number + ") " + formatString(link, map[string]string{"link": item.Link, "title": item.Title}) + "\n"
		}

		message := tgbotapi.NewMessage(msg.Chat.ID, bestArticles)
		message.ParseMode = "HTML"
		bot.send(message)
	}
}


// mailout —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é config.Delay –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥
func (bot *Bot) mailout() {
	var lastTime LastArticlesTime

	// –ß—Ç–µ–Ω–∏–µ LastTime
	raw, err := ioutil.ReadFile(config.Data.Prefix + "data/lastArticleTime.json")
	if err != nil {
		logging.LogFatalError("Mailout", "–ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–µ—Å—Ç—å lastArticleTime.json", err)
	}
	json.Unmarshal(raw, &lastTime)

	// –¢–∞–π–º–µ—Ä
	ticker := time.NewTicker(time.Duration(config.Data.Delay))

	// –ü–µ—Ä–≤—ã–π —Ä–∞–∑ —Å—Ç–∞—Ç—å–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É
	for ; true; <-ticker.C {
		allUsers, err := db.GetAllUsers()
		if err != nil {
			logging.LogMinorError("mailout", "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", err)
			continue
		}

		// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å–∏
		var habrUsers, geekUsers []db.User
		for _, user := range allUsers {
			if user.HabrMailout {
				habrUsers = append(habrUsers, user)
			}
			if user.GeekMailout {
				geekUsers = append(geekUsers, user)
			}
		}

		// –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Habrahabr
		logging.LogEvent("–†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Habrahabr")
		startTime := time.Now()
		err = habrMailout(bot, habrUsers, &lastTime)
		if err != nil {
			logging.LogMinorError("habrMailout", "–≤—ã–∑–æ–≤ habrMailout", err)
		}
		logging.LogEvent("–ó–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + time.Since(startTime).String())

		time.Sleep(time.Second * 1)

		// –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Geektimes
		logging.LogEvent("–†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–µ–π —Å Geektimes")
		startTime = time.Now()
		err = geekMailout(bot, geekUsers, &lastTime)
		if err != nil {
			logging.LogMinorError("geekMailout", "–≤—ã–∑–æ–≤ geekMailout", err)
		}
		logging.LogEvent("–ó–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + time.Since(startTime).String())

		// –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏
		raw, _ = json.Marshal(lastTime)
		err = ioutil.WriteFile(config.Data.Prefix + "data/lastArticleTime.json", raw, 0644)
		if err != nil {
			logging.LogFatalError("Mailout", "–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª lastArticleTime.json", err)
		}
		
	}
}

 
// habrMailout –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ Habrahabr.ru
func habrMailout(bot *Bot, allUsers []db.User, lastTime *LastArticlesTime) error {
	// Parser
	parser := gofeed.NewParser()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ RSS-–ª–µ–Ω—Ç—ã
	feed, err := parser.ParseURL(allHabrArticlesURL)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
	var newArticles []article
	for _, item := range feed.Items {
		articleTime, err := time.Parse(time.RFC1123, item.Published)
		if err != nil {
			logging.LogMinorError("Mailout", "", err)
			continue
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ, —á–µ–º –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RSS-–ª–µ–Ω—Ç—ã
		if lastTime.Habr < articleTime.Unix() {
			// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ —Å—Ç–∞—Ç—å–∏
			var tags []string
			for _, tag := range item.Categories {
				// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç "Some Tag" –∫ "some_tag"
				tag = strings.Replace(tag, " ", "_", -1)
				tag = strings.ToLower(tag)
				tags = append(tags, tag)
			}
			instantView := formatString(habrInstantViewURL, map[string]string{"url": item.Link})
			message := formatString(messageText, 
									map[string]string{"source": "Habrahabr", "title": item.Title, "IV": instantView, "link": item.Link})

			temp := article{title: item.Title, tags: tags, link: item.Link, message: message}

			newArticles = append(newArticles, temp)
		} else {
			break
		}
	}

	// –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –±—ã–ª–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º—è –Ω–µ –Ω—É–∂–Ω–æ
	if len(newArticles) == 0 {
		return nil
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–µ–π
	// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	articlesCounter := 0
	for _, user := range allUsers {
		// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—å—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
		for i := len(newArticles) - 1; i >= 0; i-- {
			shouldSend := false
			if len(user.HabrTags) == 0 {
				shouldSend = true
			} else {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç—å–µ
				for _, tag := range newArticles[i].tags {
					for _, userTag := range user.HabrTags {
						if tag == userTag {
							shouldSend = true
							goto send
						}
					}
				}
			}
			send:

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if shouldSend {
				articlesCounter++
				message := tgbotapi.NewMessage(user.ID, newArticles[i].message)
				message.ParseMode = "HTML"

				t := time.Now()
				
				bot.send(message)

				since := time.Since(t)
				if since >= time.Second * 1 {
					logging.LogMinorError("habrMailout", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–Ω—è–ª–∞ " + since.String(), errors.New(""))
				}
			}
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	tempTime, err := time.Parse(time.RFC1123, feed.Items[0].Published)
	if err != nil {
		return err
	}
	lastTime.Habr = tempTime.Unix()

	return nil
}


// geekMailout –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ Geektimes.ru
func geekMailout(bot *Bot, allUsers []db.User, lastTime *LastArticlesTime) error {
	// Parser
	parser := gofeed.NewParser()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ RSS-–ª–µ–Ω—Ç—ã
	feed, err := parser.ParseURL(allGeekArticlesURL)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
	var newArticles []article
	for _, item := range feed.Items {
		articleTime, err := time.Parse(time.RFC1123, item.Published)
		if err != nil {
			logging.LogMinorError("Mailout", "", err)
			continue
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ, —á–µ–º –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RSS-–ª–µ–Ω—Ç—ã
		if lastTime.Geek < articleTime.Unix() {
			// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ —Å—Ç–∞—Ç—å–∏
			var tags []string
			for _, tag := range item.Categories {
				// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç "Some Tag" –∫ "some_tag"
				tag = strings.Replace(tag, " ", "_", -1)
				tag = strings.ToLower(tag)
				tags = append(tags, tag)
			}
			instantView := formatString(geekInstantViewURL, map[string]string{"url": item.Link})
			message := formatString(messageText, 
								map[string]string{"source": "Geektimes", "title": item.Title, "IV": instantView, "link": item.Link})

			temp := article{title: item.Title, tags: tags, link: item.Link, message: message}

			newArticles = append(newArticles, temp)
		} else {
			break
		}
	}

	// –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –±—ã–ª–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º—è –Ω–µ –Ω—É–∂–Ω–æ
	if len(newArticles) == 0 {
		return nil
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–µ–π
	// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	for _, user := range allUsers {
		// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—å—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
		for i := len(newArticles) - 1; i >= 0; i-- {
			
			shouldSend := false
			if len(user.GeekTags) == 0 {
				shouldSend = true
			} else {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç—å–µ
				for _, tag := range newArticles[i].tags {
					for _, userTag := range user.GeekTags {
						if tag == userTag {
							shouldSend = true
							goto send
						}
					}
				}
			}
			send:

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if shouldSend {
				message := tgbotapi.NewMessage(user.ID, newArticles[i].message)
				message.ParseMode = "HTML"

				t := time.Now()
				
				bot.send(message)

				since := time.Since(t)
				if since >= time.Second * 1 {
					logging.LogMinorError("geekMailout", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–Ω—è–ª–∞ " + since.String(), errors.New(""))
				}
			}
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	tempTime, err := time.Parse(time.RFC1123, feed.Items[0].Published)
	if err != nil {
		return err
	}
	lastTime.Geek = tempTime.Unix()

	return nil
}


//handleKeyboard –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–æ–±–æ—Ç–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤—ã –∫–æ–º–∞–Ω–¥.
func (bot *Bot) handleKeyboard(data chan userCommand) {

	for command := range data {
		text := command.message.Text

		if strings.Contains(text, "keyboard") {
			var message tgbotapi.MessageConfig

			if command.site == habr {
				message = tgbotapi.NewMessage(command.message.Chat.ID, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + habr)
				message.ReplyMarkup = habrKeyboard()
			} else if command.site == geek {
				message = tgbotapi.NewMessage(command.message.Chat.ID, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + geek)
				message.ReplyMarkup = geekKeyboard()
			}

			bot.send(message)
		}
	}

}
